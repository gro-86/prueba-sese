// <auto-generated />
using System;
using BreakingLeague.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BreakingLeague.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240809114741_mig2")]
    partial class mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BreakingLeague.Model.Bboy", b =>
                {
                    b.Property<int>("Bboy_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Bboy_Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Aka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Attitude")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Crew_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Injured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Person_Id")
                        .HasColumnType("int");

                    b.Property<int>("Skill_Id")
                        .HasColumnType("int");

                    b.Property<int>("Style_")
                        .HasColumnType("int");

                    b.Property<int>("Tournament_Id")
                        .HasColumnType("int");

                    b.Property<int>("Trophies")
                        .HasColumnType("int");

                    b.HasKey("Bboy_Id");

                    b.HasIndex("Crew_Id");

                    b.HasIndex("Tournament_Id");

                    b.ToTable("Signed_Bboys");
                });

            modelBuilder.Entity("BreakingLeague.Model.Crew", b =>
                {
                    b.Property<int>("Crew_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Crew_Id"));

                    b.Property<string>("Crew_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Foundation")
                        .HasColumnType("datetime2");

                    b.Property<int>("Tournament_Id")
                        .HasColumnType("int");

                    b.Property<int>("Tournament_Id1")
                        .HasColumnType("int");

                    b.HasKey("Crew_Id");

                    b.HasIndex("Tournament_Id1");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("BreakingLeague.Model.Judge", b =>
                {
                    b.Property<int>("Judge_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Judge_Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Criteria1")
                        .HasColumnType("int");

                    b.Property<int>("Criteria2")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Person_Id")
                        .HasColumnType("int");

                    b.Property<int>("Tournament_Id")
                        .HasColumnType("int");

                    b.HasKey("Judge_Id");

                    b.HasIndex("Tournament_Id");

                    b.ToTable("Judges");
                });

            modelBuilder.Entity("BreakingLeague.Model.Skill", b =>
                {
                    b.Property<int>("Skill_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Skill_Id"));

                    b.Property<int>("Bboy_Id")
                        .HasColumnType("int");

                    b.Property<double>("Footwork")
                        .HasColumnType("float");

                    b.Property<double>("Freeze")
                        .HasColumnType("float");

                    b.Property<double>("Power")
                        .HasColumnType("float");

                    b.Property<double>("Style")
                        .HasColumnType("float");

                    b.HasKey("Skill_Id");

                    b.HasIndex("Bboy_Id")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("BreakingLeague.Model.Tournament", b =>
                {
                    b.Property<int>("Tournament_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tournament_Id"));

                    b.Property<string>("Championship_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Tournament_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tournament_Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("BreakingLeague.Model.Bboy", b =>
                {
                    b.HasOne("BreakingLeague.Model.Crew", "Crew")
                        .WithMany("Bboys")
                        .HasForeignKey("Crew_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BreakingLeague.Model.Tournament", "Tournament")
                        .WithMany("Signed_Bboys")
                        .HasForeignKey("Tournament_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BreakingLeague.Model.Crew", b =>
                {
                    b.HasOne("BreakingLeague.Model.Tournament", "Tournament")
                        .WithMany("Crews")
                        .HasForeignKey("Tournament_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BreakingLeague.Model.Judge", b =>
                {
                    b.HasOne("BreakingLeague.Model.Tournament", "Tournament")
                        .WithMany("Judges")
                        .HasForeignKey("Tournament_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BreakingLeague.Model.Skill", b =>
                {
                    b.HasOne("BreakingLeague.Model.Bboy", "Bboy")
                        .WithOne("Skill_")
                        .HasForeignKey("BreakingLeague.Model.Skill", "Bboy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bboy");
                });

            modelBuilder.Entity("BreakingLeague.Model.Bboy", b =>
                {
                    b.Navigation("Skill_")
                        .IsRequired();
                });

            modelBuilder.Entity("BreakingLeague.Model.Crew", b =>
                {
                    b.Navigation("Bboys");
                });

            modelBuilder.Entity("BreakingLeague.Model.Tournament", b =>
                {
                    b.Navigation("Crews");

                    b.Navigation("Judges");

                    b.Navigation("Signed_Bboys");
                });
#pragma warning restore 612, 618
        }
    }
}
